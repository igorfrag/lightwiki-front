/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PostsPageImport } from './routes/posts/$page'
import { Route as PostNewPostImport } from './routes/post/new-post'
import { Route as PostPostidImport } from './routes/post/$postid'
import { Route as AccountRegisterImport } from './routes/account/register'
import { Route as AccountLoginImport } from './routes/account/login'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsPageRoute = PostsPageImport.update({
  id: '/posts/$page',
  path: '/posts/$page',
  getParentRoute: () => rootRoute,
} as any)

const PostNewPostRoute = PostNewPostImport.update({
  id: '/post/new-post',
  path: '/post/new-post',
  getParentRoute: () => rootRoute,
} as any)

const PostPostidRoute = PostPostidImport.update({
  id: '/post/$postid',
  path: '/post/$postid',
  getParentRoute: () => rootRoute,
} as any)

const AccountRegisterRoute = AccountRegisterImport.update({
  id: '/account/register',
  path: '/account/register',
  getParentRoute: () => rootRoute,
} as any)

const AccountLoginRoute = AccountLoginImport.update({
  id: '/account/login',
  path: '/account/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/account/login': {
      id: '/account/login'
      path: '/account/login'
      fullPath: '/account/login'
      preLoaderRoute: typeof AccountLoginImport
      parentRoute: typeof rootRoute
    }
    '/account/register': {
      id: '/account/register'
      path: '/account/register'
      fullPath: '/account/register'
      preLoaderRoute: typeof AccountRegisterImport
      parentRoute: typeof rootRoute
    }
    '/post/$postid': {
      id: '/post/$postid'
      path: '/post/$postid'
      fullPath: '/post/$postid'
      preLoaderRoute: typeof PostPostidImport
      parentRoute: typeof rootRoute
    }
    '/post/new-post': {
      id: '/post/new-post'
      path: '/post/new-post'
      fullPath: '/post/new-post'
      preLoaderRoute: typeof PostNewPostImport
      parentRoute: typeof rootRoute
    }
    '/posts/$page': {
      id: '/posts/$page'
      path: '/posts/$page'
      fullPath: '/posts/$page'
      preLoaderRoute: typeof PostsPageImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account/login': typeof AccountLoginRoute
  '/account/register': typeof AccountRegisterRoute
  '/post/$postid': typeof PostPostidRoute
  '/post/new-post': typeof PostNewPostRoute
  '/posts/$page': typeof PostsPageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account/login': typeof AccountLoginRoute
  '/account/register': typeof AccountRegisterRoute
  '/post/$postid': typeof PostPostidRoute
  '/post/new-post': typeof PostNewPostRoute
  '/posts/$page': typeof PostsPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/account/login': typeof AccountLoginRoute
  '/account/register': typeof AccountRegisterRoute
  '/post/$postid': typeof PostPostidRoute
  '/post/new-post': typeof PostNewPostRoute
  '/posts/$page': typeof PostsPageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account/login'
    | '/account/register'
    | '/post/$postid'
    | '/post/new-post'
    | '/posts/$page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account/login'
    | '/account/register'
    | '/post/$postid'
    | '/post/new-post'
    | '/posts/$page'
  id:
    | '__root__'
    | '/'
    | '/account/login'
    | '/account/register'
    | '/post/$postid'
    | '/post/new-post'
    | '/posts/$page'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountLoginRoute: typeof AccountLoginRoute
  AccountRegisterRoute: typeof AccountRegisterRoute
  PostPostidRoute: typeof PostPostidRoute
  PostNewPostRoute: typeof PostNewPostRoute
  PostsPageRoute: typeof PostsPageRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountLoginRoute: AccountLoginRoute,
  AccountRegisterRoute: AccountRegisterRoute,
  PostPostidRoute: PostPostidRoute,
  PostNewPostRoute: PostNewPostRoute,
  PostsPageRoute: PostsPageRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/account/login",
        "/account/register",
        "/post/$postid",
        "/post/new-post",
        "/posts/$page"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/account/login": {
      "filePath": "account/login.tsx"
    },
    "/account/register": {
      "filePath": "account/register.tsx"
    },
    "/post/$postid": {
      "filePath": "post/$postid.tsx"
    },
    "/post/new-post": {
      "filePath": "post/new-post.tsx"
    },
    "/posts/$page": {
      "filePath": "posts/$page.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
